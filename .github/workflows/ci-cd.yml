name: CI/CD Pipeline To Build and Release the Guessing Game

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Mise and Dependencies
      uses: jdx/mise-action@v2
    
    - name: Setup Rust with mise
      run: |
        # Verify mise is available (should be handled by mise-action)
        echo "=== Mise Version ==="
        mise --version

        # Show mise.toml contents
        echo "\n=== Using mise.toml ==="
        cat mise.toml | grep -v '^#' | grep -v '^$'

        # Install Rust and components using mise
        echo "\n=== Installing Rust and components ==="
        if ! mise install; then
          echo "❌ Failed to install tools with mise"
          exit 1
        fi

        # Install additional Rust components (fallback if mise doesn't install them)
        echo "\n=== Installing Rust components ==="
        if command -v rustup >/dev/null 2>&1; then
          echo "rustup found, ensuring components are installed..."
          rustup component add rustfmt || echo "⚠️  Failed to install rustfmt"
          rustup component add clippy || echo "⚠️  Failed to install clippy"
        else
          echo "⚠️  rustup not found, components may not be available"
        fi

        # Verify installation
        echo "\n=== Rust Toolchain ==="
        rustc --version
        cargo --version

        # Verify components are available
        echo "\n=== Rust Components ==="
        which rustc || (echo "❌ rustc not found in PATH" && exit 1)
        which cargo || (echo "❌ cargo not found in PATH" && exit 1)
        which rustfmt && echo "✅ rustfmt found" || echo "⚠️  rustfmt not found in PATH"
        which clippy && echo "✅ clippy found" || echo "⚠️  clippy not found in PATH"

        # Test that tools work
        echo "\n=== Testing Tools ==="
        rustfmt --version || echo "⚠️  rustfmt not working"
        cargo fmt --version || echo "⚠️  cargo fmt not working"
        cargo clippy --version || echo "⚠️  cargo clippy not working"
    
    - name: Trust mise.toml
      run: |
        chmod +x scripts/trust-mise.sh
        ./scripts/trust-mise.sh
    
    - name: Run CI tasks with mise
      run: |
        # Run the 'ci' task which includes check, lint, and build
        echo "=== Running CI tasks ==="
        if ! mise run ci; then
          echo "❌ CI tasks failed"
          echo "Available mise tasks:"
          mise tasks
          exit 1
        fi
        echo "✅ CI tasks completed successfully"
    
    - name: Verify binary exists
      run: |
        echo "=== Checking for release binary ==="
        ls -la target/release/
        if [ ! -f "target/release/guessing_game" ]; then
          echo "❌ Binary not found at target/release/guessing_game"
          echo "Available files:"
          find target -name "*" -type f 2>/dev/null || echo "No files found in target directory"
          exit 1
        else
          echo "✅ Binary found at target/release/guessing_game"
          echo "Binary size: $(stat -c%s target/release/guessing_game) bytes"
        fi

    - name: Upload release binary
      uses: actions/upload-artifact@v4
      with:
        name: guessing-game-${{ github.run_number }}
        path: target/release/guessing_game
        if-no-files-found: error
        retention-days: 7
    
    - name: Generate build summary
      if: always()
      run: |
        echo "# Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Rust Version:** $(rustc --version)" >> $GITHUB_STEP_SUMMARY
        echo "- **Cargo Version:** $(cargo --version)" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Profile:** Release" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Tools:** Using mise for dependency and task management" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Tasks Performed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Format: Ensured code is properly formatted" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Lint: Checked code with clippy" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Build: Created optimized release binary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Binary: \`guessing_game\` (uploaded as artifact: guessing-game-${{ github.run_number }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the binary from the 'Artifacts' section" >> $GITHUB_STEP_SUMMARY
        echo "2. Make the binary executable: `chmod +x guessing_game`" >> $GITHUB_STEP_SUMMARY
        echo "3. Run the program: `./guessing_game`" >> $GITHUB_STEP_SUMMARY
